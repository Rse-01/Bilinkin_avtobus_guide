// Маркеры памяти
// void   - Пустота (не возвращает значение)
// int    - Целое число (использует фиксированное количество байтов)
// char   - Символ (один символ текста)
// long   - Длинное целое число (больше памяти, чем обычное int)

// ------setup - Функция инициализации программы
// ()     - Круглые скобки обозначают начало/конец аргументов функции
// {}     - Фигурные скобки определяют тело функции

// Сложные команды

// Способности робота
// Говорить (объявление пустой функции говорения)
void gov() {
  // Тело функции говорения пока пустое
}

// Проверка текущего времени
void provVrem() {
  // Реализация проверки времени отсутствует
}

// Чтение расписания
void provRasp() {
  // Реализация чтения расписания отсутствует
}

// Показ числа (вывод числа на экран или устройство вывода)
void pokaz_chislo() {
  // Реализация показа числа отсутствует
}

// Проверка состояния кнопки
void knop1() {
  // Реализация проверки кнопки отсутствует
}

// Основная настройка устройства
void setup() {
  // Переменная для хранения состояний
  int s = 0; // Начальное состояние системы
}

// Основной цикл программы (бесконечный цикл)
void loop() {
  // Переходы между состояниями
  // Если система находится в состоянии ожидания
  if (s == 1) {
    // Код состояния ожидания
  }

  // Расписание активности (пример массива строк)
  const char* rasp[] = {"18:30", "19:00"}; // Массив времени расписания

  // Если система работает
  if (s == 2) {
    provVrem(); // Проверяем текущее время
    for (int a = 0; a < sizeof(rasp)/sizeof(*rasp); a++) { // Проходим по каждому элементу расписания
      // Логика обработки расписания должна быть тут
    }
  }

  // Если батарея разряжена
  if (s == 3) {
    // Действия при разряженном аккумуляторе
  }
}